#include  "bsp.h"

             NAME   MAIN
             PUBLIC state,main,id,SIZE,delay_ms
             EXTERN SysConfig,ClrLEDs,delay,delayLoop
             EXTERN DecLED,RotLEDLeft,Print_Arr
      
             
;----------------------------------------------------------------------------------
             ORG      DataSegStart         // Begins a DATA segment       
state        DW   0                        // state variable - defult is 0
id           DW   0,9,0,0,8,2,9,1
SIZE         DW   8
delay_ms     DW   250

;-------------------------------------------------------------------------------------          
             ;RSEG    CSTACK    ; shows to compiler where is the RAM populating limit
                                ; can be ignored
;-------------------------------------------------------------------------------------
             ORG     CodeSegStart       // Program Reset = Begins a CODE segment
             
main         mov.w   #StackTosStart,SP  // Initialize stack pointer to the RAM end 
             call    #SysConfig         // call SysConfig from hal
             clr     state              // set to idle state at the beginning
             mov.b   #0xff,R15 //will save state1 Leds state; initial 0xff
             mov.b   #0x01,R14 //will save state2 Leds state; initial 0x01
;---------------------- FSM_loop -------------------------------------
state0       cmp     #0x00,state        //if state!=0 jump to state1          
             jnz     state1
             call    #ClrLEDs //turn off all leds
             bis.w   #CPUOFF+GIE,SR //rnter sleep mode LPM0, enable global interrupts
;state1:             
;---------------------------------------------------------------------
state1       cmp     #0x01,state        //if state!=1 jump to state2 
             jnz     state2
             mov     #20,R7            //number of iritation until state 1 is off 10sec=(20 itetations*0.5 sec)
             DINT
S1Loop       call    #DecLED           //call DecLED 
             push    #delay62_5ms      //value of delay
             push    #3               // the number of times we will run 62.5 ms delay
             call    #delayLoop        //call delay function
             dec R7                    //R7--;iterations counter    
             jz exit                 // when R7==0 jump to exit
             JMP S1Loop                //else repeat S1Loop
             EINT

;state2:             
;---------------------------------------------------------------------
state2       cmp     #0x02,state        //if state!=2 jump to state3
             jnz     state3  
             mov     #10,R7             //number of iritation until state 1 is off 5sec=(10 itetations*0.5 sec)
             DINT
S2Loop       call    #RotLEDLeft        //CALL RotLEDLeft
             push    #delay62_5ms       //value of delay
             push    #3                // the number of times we will run 62.5 ms delay
             call    #delayLoop        //call delay function
             dec R7                    //R7--;iterations counter    
             jz exit                 // when R7==0 jump to exit
             JMP S2Loop                //else repeat S1Loop
             EINT
;state3:             
;---------------------------------------------------------------------
state3        cmp     #0x03,state        //if state!=3 jump to state0
              jnz     state4  
              
             
              bis.b #0x80,&P2OUT //P2.7 : 0->1 logic ; 1 cycle at 0 logic
              mov #104,R13 //1 cycle at 1 logic  |------------
HighV         dec R13 //1 cycles at 1 logic    | 3*y+4=315; y~104
              jnz HighV //2 cycles at 1          | ------------
              bic.b #0x80,&P2OUT //1 cycle at 1 logic
              mov #34,R13 //1 cycle 0 logic         |3*x +3 =105; x~34
LowV          dec R13 //1 cycle at 0 logic          |
              jnz LowV //2 cycles 0 logic
              jmp state3  //2 cycles at 0 logic
               
;state4:             
;---------------------------------------------------------------------
state4       cmp     #0x04,state        //if state!=2 jump to state3
             jnz     state0  
   
             DINT
             call #Print_Arr
             EINT

             
             
             
exit         mov #0,state //change state to 0
             jmp     state0
                 
             END
